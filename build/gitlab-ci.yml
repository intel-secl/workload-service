image: golang:1.14

before_script:
  - git config --global http."https://${GITLAB_SERVER}".proxy ""
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_SERVER}".insteadOf "https://${GITLAB_SERVER}"

  - echo "[http \"https://${GITLAB_SERVER}\"]" >> ~/.gitconfig
  - echo "        proxy = \"\"" >> ~/.gitconfig
  - cd $CI_PROJECT_DIR
  - apt update -yq && apt install -yq makeself

variables:
  POSTGRES_DB: wls
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: "test"
  http_proxy: "${HTTP_PROXY}"
  https_proxy: "${HTTPS_PROXY}"
  no_proxy: "${NO_PROXY}"
  NO_PROXY: "${NO_PROXY}"
  DEBIAN_FRONTEND: noninteractive

stages:
  - build
  - scan
  - test
  - deploy

test:
  services:
    - postgres:11
  stage: test
  tags:
    - go
  script:
    - GOOS=linux GOSUMDB=off GOPROXY=direct go test ./... -tags=integration -coverpkg=./... -coverprofile cover.out
    - go tool cover -func cover.out
    - go tool cover -html=cover.out -o cover.html
  artifacts:
    paths:
      - "cover.html"

compile:
  stage: build
  tags:
    - go
  script:
    - make workload-service

installer:
  stage: deploy
  tags:
    - go
  script:
    - apt-get update && apt-get install -y makeself
    - make installer
    - cp ./docs/swagger.yml ./out/swagger.yml
  artifacts:
    paths:
      - "out/wls-*.bin"
      - "out/swagger.yml"
    expire_in: 1 week

docker:
  stage: deploy
  tags: 
    - go
    - docker
  script:
    - curl -sSL https://get.docker.com/ | sh
    - apt-get update && apt-get install -y makeself
    - make docker
    - cp ./docs/swagger.yml ./out/swagger.yml
  artifacts:
    paths:
      - "out/*.tar"
      - "out/swagger.yml"
    expire_in: 1 week
    
    
Stylechecker:
  stage: scan
  only:
     - merge_requests
  image: golang:1.14
  tags:
    - k8s
  script:
    - gofmt -l .
    - |
        if [ "$(gofmt -l . | wc -l)"  -gt 0 ]; then
                    exit 1
        fi    
    
checkmarx:
  stage: scan
  only:
     - merge_requests
  allow_failure: true
  services:
     - docker:dind
  image:
    name: ${DOCKER_REGISTRY_SERVER}:${DOCKER_REGISTRY_PORT}/checkmarx:isecl
    entrypoint: ['']
  tags:
    - docker-checkmarx
    #  /app/cx-flow.jar
    # /home/CX/cx-flow.jar
  script:
    - cat ${CX_FLOW_CONFIG} > application.yml
    - |
      if [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]; then 
        java -jar  /app/cx-flow.jar --spring.config.location=./application.yml \
          --scan \
          --cx-team="${CHECKMARX_TEAM}" \
          --cx-project="${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}" \
          --app="${CI_PROJECT_NAME}" \
          --project-id=${CI_PROJECT_ID} \
          --merge-id=${CI_MERGE_REQUEST_IID} \
          --bug-tracker=GITLABMERGE \
          --cx-flow.break-build=false \
          --f=.
      else
        java -jar /app/cx-flow.jar --spring.config.location=./application.yml \
          --scan \
          --cx-team="${CHECKMARX_TEAM}" \
          --cx-project="${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}" \
          --app="${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}" \
          --branch="${CI_COMMIT_REF_NAME}" \
          --repo-name="${CI_PROJECT_NAME}" \
          --namespace="${CI_PROJECT_NAMESPACE##*/}" \
          --cx-flow.break-build=false \
          --f=.
      fi
