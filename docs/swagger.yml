openapi: "3.0.0"
info:
  version: 1.0.0
  title: ISecL Workload Service
servers:
  - url: http://workload-service.com/wls
paths:
  /flavors/{id}:
    get:
      summary: Get a single Flavor
      description: Get a single Flavor by its ID
      parameters:
        - $ref : '#/components/parameters/flavorIdParam'
      tags:
        - Flavors
      responses:
        '200':
          description: Successfully fetched Flavor
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Flavor'
        '404':
          description: Flavor not Found
    delete:
      tags:
        - Flavors
      summary: Delete a Flavor
      description: Delete a Flavor by its ID. This also deletes the image flavor link association from the database table.
      parameters:
        - $ref : '#/components/parameters/flavorIdParam'
      responses:
        '204':
          description: Successfully deleted Flavor
        '404':
          description: Flavor not found

  /flavors:
    post:
      tags:
        - Flavors
      summary: Submit a new Flavor
      description: Submit a new Flavor document 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flavor'
            example:
              flavor:
                meta:
                  id: 7e862b36-ed37-4231-b90b-b548864c7634
                  description:
                    flavor_part: IMAGE
                    label: Cirros-enc
                encryption:
                  encryption_required: true
                  key_url: 'http://10.1.68.21:20080/v1/keys/73755fda-c910-46be-821f-e8ddeab189e9/transfer'
                  digest: 261209df1789073192285e4e408addadb35068421ef4890a5d4d434
                      
      responses:
        '201':
          description: Successfully created Flavor
        '409':
          description: Flavor with ID already exists
  /images/{id}:
    get:
      tags:
        - Images
      summary: Retrieve an Image 
      description: Query an Image by its UUID and see it's associated flavorId
      parameters:
        - $ref : '#/components/parameters/imageIdParam'
      responses:
        '200':
          description: Successfully retrieved Image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: Image not found
    delete:
      tags:
        - Images
      summary: Delete an Image
      description: Delete an Image by its UUID
      parameters:
        - $ref: '#/components/parameters/imageIdParam'
      responses:
        '204':
          description: Successfully deleted Image
        '404':
          description: Image not found
  /images:
    post:
      tags:
        - Images
      summary: Submit an Image
      description: Submit an Image along with the FlavorID it is to be associated with
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '201':
          description: Successfully created Image
        '409':
          description: Image with ID already 
    get:
      tags:
        - Images
      summary: Query Images
      description: Query Images via filter Criteria. Filter criteria is evaluated as the "Logical AND" of all query parameters.
      parameters:
        - in: query
          name: image_id
          schema:
            type: string
            format: uuid
          required: false
          description: Filter by image uuid
        - in: query
          name: flavor_id
          schema:
            type: string
            format: uuid
          required: false
          description: UUID of the flavor associated with images. Specifying this will find all Images that are associated with this flavor id.
      responses:
        '200':
          description: Successfully fetched Images
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Image'
  /images/{id}/flavor-key:
    get:
      summary: Get flavor and key for image 
      parameters:
        - $ref: '#/components/parameters/imageIdParam'
        - in: query
          name: hardware_uuid
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: key_id
          schema:
            type: string
            format: uuid
      tags:
        - Images
        - Flavors
        - RPC
      description: Get flavor and key for image by communicating with HVS to get the saml report for the hardware UUID
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlavorKey'
  /images/{id}/flavors:
    get:
      summary: Query flavors associated with image ID
      parameters:
        - $ref : '#/components/parameters/imageIdParam'
      tags:
        - Images
        - Flavors
      description: Query flavors associated with image ID
      responses:
        '200':
          description: Successfully queried flavors associated with image
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flavor'
        '404':
          description: Image with ID does not exist or Image ID has no associated flavors
  /images/{id}/flavors/{flavorId}:
    parameters:
      - $ref: '#/components/parameters/imageIdParam'
      - name: flavorId
        in: path
        description: Flavor ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get flavor with ID that is associated with image
      tags:
      - Images
      - Flavors
      responses:
        '200':
          description: Successfully got flavor associated with image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flavor'
        '404':
          description: Image ID not found or Flavor ID is not associated with image
    put:
      summary: Associate flavor ID with an image
      tags:
      - Images
      - Flavors
      responses:
        '201':
          description: Successfully associated flavorID to image
        '404':
          description: Image or Flavor does not exist
    delete:
      summary: Remove flavor association with image
      tags:
      - Images
      - Flavors
      responses:
        '204':
          description: Successfully removed flavor association
        '404':
          description: Image or Flavor does not exist
  /reports:
    get:
      summary: query all reports with criteria
      tags:
        - Reports
      parameters: 
        - in: query
          name: num_of_days
          schema:
            type: integer
        - in: query
          name: report_id
          schema:
            type: string
            format: uuid
        - in: query
          name: from_date
          schema:
            type: string
            format: date
        - in: query 
          name: hardware_uuid
          schema:
            type: string
        - in: query
          name: latest_per_vm
          schema:
            type: boolean
      responses:
        '200':
          description: Successfully queried reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
    post:
      summary: Create a new report
      description: Submit a new report document. The report's UUID must be unique
      tags:
        - Reports
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
      responses:
        '201':
          description: Successfully created report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '409':
          description: Report with ID already exists
  /reports/{id}:
    parameters:
      - name: id 
        in: path
        description: Report ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      summary: Delete report by ID
      description: Delete report by ID
      tags:
        - Reports
      responses:
        '204':
          description: Successfully deleted report
        '404':
          description: Report not found
  # /reports:
  #   get:
  #     summary: Gets all Trust Reports
  #     description: Retrieves all Trust Report documents and returns them in a list
  #     tags: 
  #       - Reports
  #     responses:
  #       '200':
  #         description: Successfully fetched reports
  #   post:
  #     tags:
  #       - Reports
  #     summary: Submit a new Trust Report document
  #     description: Submit a Trust Report document for persistent storage in the repository. Use /create-port if you want to fetch and submit a new Trust Report from a Host.
  #     responses:
  #       '200':
  #         description: Successfully created a new report
      
  # /create-report:
  #   post:
  #     tags:
  #       - Reports
  #     summary: Create a new Trust Report for a specified Host
  #     description: Creates a new Trust Report by fetching the Manifest from the specified Host, and verifying that Manifest against stored Flavors. 
  #     responses:
  #       '200':
  #         description: Successfully created a new report for {host}
      
  # /reports/{id}:
  #   get:
  #     parameters: 
  #       - $ref: '#/components/parameters/reportIdParam'
  #     summary: Gets a specific Trust Report 
  #     description: Gets a specific Trust Report with the specified identifier as part of URL
  #     tags:
  #       - Reports
  #     responses:
  #       '200':
  #         description: "Response containing the Trust Report"
  #       '404':
  #         description: "Trust Report with {id} could not be found"
  #   delete:
  #     parameters:
  #       - $ref: '#/components/parameters/reportIdParam'
  #     summary: Delete a specific Trust Report
  #     description: Deelete a specific Trust Report with the specified identifier as part of the URL
  #     tags:
  #       - Reports
  #     responses:
  #       '200':
  #         description: Successfully deleted report


  
  # /users:
  #   post:
  #     security: 
  #       - jwtAuth: []
  #     summary: Creates a user and returns the user ID
  #     operationId: createUser
  #     tags:
  #       - Users
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       '201':
  #         description: Created a new User
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       '401':
  #         $ref: '#/components/responses/401Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/403Forbidden'
  #   get:
  #     security: 
  #       - jwtAuth: []  
  #     summary: Queries User objects
  #     operationId: queryUsers
  #     tags:
  #       - Users
  #     parameters:
  #       - in: query
  #         name: name
  #         description: Search by name
  #         required: false
  #         schema:
  #           type: string
  #           format: int64
  #       - in: query
  #         name: roles
  #         description: Search by exact set of roles
  #         required: false
  #         schema:
  #           type: array
  #           items:  
  #             type: string
  #       - in: query
  #         name: rolesContain
  #         description: Search by subset of roles
  #         required: false
  #         schema:
  #           type: array
  #           items:  
  #             type: string
  #     responses:
  #       '200':
  #         description: A collection of User objects
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/User'
  #               uniqueItems: true
  #             example:
  #               - id: 1
  #                 name: superadmin
  #                 roles: 
  #                   - superuser
  #               - id: 2
  #                 name: jdoe
  #                 roles: 
  #                   - hvs-admin
  #                   - tagent-admin
  #       '401':
  #         $ref: '#/components/responses/401Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/403Forbidden'
          
  # /users/{id}:
  #   get:
  #     security: 
  #       - jwtAuth: []  
  #     summary: Get's an User
  #     operationId: getUser
  #     tags:
  #       - Users
  #     parameters:
  #       - $ref: '#/components/parameters/userIdParam'

  #     responses:
  #       '200':
  #         description: A User object
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       '404':
  #         description: User with {id} not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Message'
  #             example:
  #               message: "User not found"
  #       '401':
  #         $ref: '#/components/responses/401Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/403Forbidden'
  #   patch:
  #     security: 
  #       - jwtAuth: []  
  #     summary: Update an User
  #     description: "Update's an User object. This is an HTTP Patch, so it does not have to do an entire replacement. A partial object containing only the fields to be updated is acceptable."
  #     tags:
  #       - Users
  #     parameters:
  #       - $ref: '#/components/parameters/userIdParam'
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #           example:
  #             username: new-username
  #             roles: 
  #               - updatedroles
  #             password: new-pass-word
  #     responses:
  #       '204':
  #         description: Updated User
  #       '401':
  #         $ref: '#/components/responses/401Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/403Forbidden'
  #   delete:
  #     security: 
  #       - jwtAuth: []  
  #     summary: Delete's an User
  #     tags: 
  #       - Users
  #     parameters:
  #       - $ref: '#/components/parameters/userIdParam'
  #     responses:
  #       '204': 
  #         description: Deleted User
  #       '404':
  #         description: User not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Message'
  #             example: "User not found"
  #       '401':
  #         $ref: '#/components/responses/401Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/403Forbidden'
components:
  responses:
    401Unauthorized:
      description: Caller is not authenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example:
            message: "You must be authenticated to use this resource"
    403Forbidden:
      description: Caller is not authorized to use this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example:
            message: "You must have the sufficient role(s) to use this resource"
  parameters:
    flavorIdParam:
      name: id
      in: path
      description: Flavor ID
      required: true
      schema: 
        type: string
        format: uuid
    imageIdParam:
      name: id
      in: path
      description: Image ID
      required: true
      schema:
        type: string
        format: uuid
    # reportIdParam:
    #   name: id
    #   in: path
    #   description: Report ID
    #   required: true
    #   schema: 
    #     type: integer
    #     format: int64
    # userIdParam:
    #   name: id
    #   in: path
    #   description: User id
    #   required: true
    #   schema:
    #     type: integer
    #     format: int64
        
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Message:
      required:
        - message
      properties:
        message:
          type: string
      example:
        message: "Example message"
    # Token:
    #   required:
    #     - token
    #   properties:
    #     token:
    #       type: string
    #   example:
    #     token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYWRtaW4iLCJ1c2VybmFtZSI6ImFkbWluIn0.SsuL4oxS4pUJJrRKVaGEqbnBZs08R8e3Wrp4OEniqv5zWyjkjygE79pC7UxmPnsFV5mj56LxXhL2IeUKJ_fzt9Uxot5inlraziAD-wAX2n_yDuJhAr8YZxrQXWz_7dSyHrMCt9iikzvY5I5ictpO0VQHmrM4Ke3MWdNFAdG-7ku_UUKtRR86QbPFAt2_HtAYFVgPd7EBezzENa48gDiCmYATaeGL_QhzB6mNjKR-UK1i8UQUlUXPH-8qCPDJZcoGcJqcp70PTZOV1oCwwX9r96o0mxHQU_bTNcrOPTa4c3jt1PFc2evYb9t0xqhTnlxNr4vwQ0QwqkmEkYAjVRNmkQ"
    Flavor:
      type: object
      required: 
        - flavor
      properties:
        flavor:
          type: object
          required:
            - meta
            - encryption
          properties:
            meta:
              type: object
              required:
               - id
              properties:
                id:
                  type: string
                  format: uuid
                schema:
                  type: object
                  properties:
                    URI:
                      type: string
                      format: uri
                      example: "schema://"
                author:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                realm:
                  type: string
                description:
                  type: object
                  properties:
                    # need to add WAY more properties here
                    flavor_part:
                      type: string
                      example: IMAGE
                    source:
                      type: string
                    label:
                      type: string
                      example: Cirros-enc
                    ip_address:
                      type: string
                      format: ipv4
                    bios_name:
                      type: string
                    bios_version:
                      type: string
                    os_name:
                      type: string
                    os_version:
                      type: string
                    vmm_name: 
                      type: string
                    vmm_version:
                      type: string
                    tpm_version:
                      type: string
                    hardware_uuid:
                      type: string
                    comment:
                      type: string
            encryption:
              type: object
              required:
                - encryption_required
                - key_URL
                - digest
              properties:
                encryption_required:
                  type: boolean
                key_URL:
                  type: string
                  format: uri
                  example: "http://10.1.68.21:20080/v1/keys/73755fda-c910-46be-821f-e8ddeab189e9/transfer"
                digest:
                  type: string
                initialization_vector:
                  type: string
                  format: byte
    Image:
      type: object
      required:
        - id
        - flavor_id
      properties:
        id:
          type: string
          format: uuid
        flavor_id:
          type: string
          format: uuid
    Report:
      type: object
      properties:
        id:
          type: string
          format: uuid
        vm_manifest:
          type: object
          properties:
            vm_info: 
              type: object
              properties:
                vm_id:
                  type: string
                host_hardware_uuid: 
                  type: string
                image_id:
                  type: string
            image_encrypted: 
              type: boolean
        policy_name: 
          type: string
        results:
          type: array
          items:
            type: object
            properties:
              rule:
                oneOf:
                  - $ref: '#/components/schemas/EncryptionMatches'
              flavor_id:
                type: string
                format: uuid
              faults:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    cause:
                      type: string
              trusted: 
                type: boolean
        trusted:
          type: boolean
    EncryptionMatches:
      type: object
      required:
        - rule_name
        - expected
        - markers
      properties:
        rule_name: 
          type: string
        markers:
          type: array
          items:
            type: string
        expected: 
          type: object
          properties:
            name:
              type: string
            value: 
              type: boolean
    FlavorKey:
      allOf:
        - $ref: '#/components/schemas/Flavor'
        - type: object
          required: 
           - key
          properties:
            key:
              type: string
              format: byte
        